package 배열;

public class Ex01배열기초 {

	public static void main(String[] args) {

		// 배열(array)의 자료구조
		// 같은 타입의 여러 변수를 하나의 묶음으로 다루는 자료구조
		
		// 배열의 특징
		//1.같은 자료형만 저장할 수 있다
		//2.인덱스번호를 가지고 있다
		//3.인덱스번호는 0부터시작 차례로 1씩 증가
		//4.크기가 고정적이다. 선언할때 몇칸짜리인지를 지정함[8]
		
		// 배열 선언하는 방법
		// 자료형[] 배열명(변수명) = new 자료형[0];
       //  int [] numbers = new int[5];  // new : 주소값을 참조한다 numbers는 레퍼런스(참조)변수
      //   System.out.print(numbers);    // [I@626b2d4a 주소값
		
	// 5칸짜리 배열이 어디 있는지 주소값을 참조하는 레퍼런스 변수 = numbers
	// 레퍼런스 변수 생성하는 키워드	= new
    // numbers안에 주소값을 파고 들어가야 5칸의 인덱스를 볼수 있음 주소값이 인덱스를 지정하므로 인덱스로 데이터 찾를 수 있다
         // 주소값이라는 개념
         // 자바에서는 데이터를 저장하는 공간이 분리되어 있다 스택(좁은 공간) 힙(넓은 공간)
         // 서로 다른 저장공간에 있는 데이터를 불러오기 위해서는
         // 해당하는 데이터가 어디에 저장되어있는지 주소값이 필요!
         // 아파트 우편함 101동 101호의 우편함 101동 101호가 주소값
         
         //  배열을 선언하면 
         //1) 스택(STACK)영역 : 비교적 작은 양의 데이터를 저장하는 공간
		// 2) HEAP 영역 : 크고 복잡한 데이터를 저장하는 공간 
         //-->GARBAGE COLLECTOR(GC)라는 기능이 있어 주기적으로 필요없는 데이터들을 정리해준다.이클립스에 있다.
         
         // 배열안에 데이터를 저장하는 방법
         //--> 정확하게 방번호 (인덱스)를 지정한 후에 저장
         
         // 배열에 2번째 칸에 15을 넣어보자~
         int [] numbers = new int[5];
         numbers[1] = 15;                      // 몇번방에 넣을 거냐 2번째방에 15을 넣는다.
         System.out.println(numbers[1]);       //15을 출력
         // 인덱스를 초과하면 에러발생
         numbers[4] = 20;                     // 15을 출력
         System.out.print(numbers[4]);
         //numbers[5] = 30;                      // 15익센션 에러발생
         
         
         
         
         
		
	}

}
